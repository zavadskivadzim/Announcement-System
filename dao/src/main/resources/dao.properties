USERS_WITH_RATING=select new com.zavadski.model.dto.UserWithRating (u.id, u.firstName, u.surname, avg(g.grade)) \
  from User u Left OUTER JOIN Grade g ON u.id = g.receiver GROUP BY u.id

FILTER_ANNOUNCEMENT_CATEGORY_MIN_MAX_PRICE=\
  select new com.zavadski.model.dto.AnnouncementByFilterDto (a.id, a.body, a.price) from Announcement a \
  LEFT outer JOIN Category c ON a.category = c.id \
  LEFT outer JOIN Grade g ON a.user = g.receiver \
  LEFT outer JOIN Paid p ON a.id = p.announcement \
  WHERE c.name = :category and a.price <= :maxPrice and a.price >= :minPrice \
  and a.status = 'ACTIVE' \
  GROUP BY a.id, p.paidFrom, p.paidTo \
  order by \
  CASE WHEN p.paidFrom < CURRENT_TIMESTAMP and p.paidTo > CURRENT_TIMESTAMP THEN p.paidTo end asc, \
  avg(g.grade) desc

FILTER_ANNOUNCEMENT_MIN_MAX_PRICE=\
  select new com.zavadski.model.dto.AnnouncementByFilterDto (a.id, a.body, a.price) from Announcement a \
  LEFT outer JOIN Category c ON a.category = c.id \
  LEFT outer JOIN Grade g ON a.user = g.receiver \
  LEFT outer JOIN Paid p ON a.id = p.announcement \
  WHERE a.price <= :maxPrice and a.price >= :minPrice \
  and a.status = 'ACTIVE' \
  GROUP BY a.id, p.paidFrom, p.paidTo \
  order by \
  CASE WHEN p.paidFrom < CURRENT_TIMESTAMP and p.paidTo > CURRENT_TIMESTAMP THEN p.paidTo end asc, \
  avg(g.grade) desc

FILTER_ANNOUNCEMENT_MAX_PRICE=\
  select new com.zavadski.model.dto.AnnouncementByFilterDto (a.id, a.body, a.price) from Announcement a \
  LEFT outer JOIN Category c ON a.category = c.id \
  LEFT outer JOIN Grade g ON a.user = g.receiver \
  LEFT outer JOIN Paid p ON a.id = p.announcement \
  WHERE a.price <= :maxPrice \
  and a.status = 'ACTIVE' \
  GROUP BY a.id, p.paidFrom, p.paidTo \
  order by \
  CASE WHEN p.paidFrom < CURRENT_TIMESTAMP and p.paidTo > CURRENT_TIMESTAMP THEN p.paidTo end asc, \
  avg(g.grade) desc

FILTER_ANNOUNCEMENT_MIN_PRICE=\
  select new com.zavadski.model.dto.AnnouncementByFilterDto (a.id, a.body, a.price) from Announcement a \
  LEFT outer JOIN Category c ON a.category = c.id \
  LEFT outer JOIN Grade g ON a.user = g.receiver \
  LEFT outer JOIN Paid p ON a.id = p.announcement \
  WHERE a.price >= :minPrice \
  and a.status = 'ACTIVE' \
  GROUP BY a.id, p.paidFrom, p.paidTo \
  order by \
  CASE WHEN p.paidFrom < CURRENT_TIMESTAMP and p.paidTo > CURRENT_TIMESTAMP THEN p.paidTo end asc, \
  avg(g.grade) desc

FILTER_ANNOUNCEMENT_CATEGORY=\
  select new com.zavadski.model.dto.AnnouncementByFilterDto (a.id, a.body, a.price) from Announcement a \
  LEFT outer JOIN Category c ON a.category = c.id \
  LEFT outer JOIN Grade g ON a.user = g.receiver \
  LEFT outer JOIN Paid p ON a.id = p.announcement \
  WHERE c.name = :category \
  and a.status = 'ACTIVE' \
  GROUP BY a.id, p.paidFrom, p.paidTo \
  order by \
  CASE WHEN p.paidFrom < CURRENT_TIMESTAMP and p.paidTo > CURRENT_TIMESTAMP THEN p.paidTo end asc, \
  avg(g.grade) desc

FILTER_ANNOUNCEMENT_CATEGORY_MIN_PRICE=\
  select new com.zavadski.model.dto.AnnouncementByFilterDto (a.id, a.body, a.price) from Announcement a \
  LEFT outer JOIN Category c ON a.category = c.id \
  LEFT outer JOIN Grade g ON a.user = g.receiver \
  LEFT outer JOIN Paid p ON a.id = p.announcement \
  WHERE c.name = :category and a.price >= :minPrice \
  and a.status = 'ACTIVE' \
  GROUP BY a.id, p.paidFrom, p.paidTo \
  order by \
  CASE WHEN p.paidFrom < CURRENT_TIMESTAMP and p.paidTo > CURRENT_TIMESTAMP THEN p.paidTo end asc, \
  avg(g.grade) desc

FILTER_ANNOUNCEMENT_CATEGORY_MAX_PRICE=\
  select new com.zavadski.model.dto.AnnouncementByFilterDto (a.id, a.body, a.price) from Announcement a \
  LEFT outer JOIN Category c ON a.category = c.id \
  LEFT outer JOIN Grade g ON a.user = g.receiver \
  LEFT outer JOIN Paid p ON a.id = p.announcement \
  WHERE c.name = :category and a.price <= :maxPrice \
  and a.status = 'ACTIVE' \
  GROUP BY a.id, p.paidFrom, p.paidTo \
  order by \
  CASE WHEN p.paidFrom < CURRENT_TIMESTAMP and p.paidTo > CURRENT_TIMESTAMP THEN p.paidTo end asc, \
  avg(g.grade) desc

ALL_ANNOUNCEMENT=\
  select new com.zavadski.model.dto.AnnouncementByFilterDto (a.id, a.body, a.price) from Announcement a \
  LEFT outer JOIN Category c ON a.category = c.id \
  LEFT outer JOIN Grade g ON a.user = g.receiver \
  LEFT outer JOIN Paid p ON a.id = p.announcement \
  and a.status = 'ACTIVE' \
  GROUP BY a.id, p.paidFrom, p.paidTo \
  order by \
  CASE WHEN p.paidFrom < CURRENT_TIMESTAMP and p.paidTo > CURRENT_TIMESTAMP THEN p.paidTo end asc, \
  avg(g.grade) desc
